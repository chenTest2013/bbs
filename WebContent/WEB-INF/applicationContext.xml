<?xml version="1.0" encoding="Utf-8"?>
<!-- Spring配置文件的根元素，使用spring-beans-3.0.xsd语义约束 -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
	">

	<!-- 打开Spring的Annotation的支持 -->
	<context:annotation-config />
	<!-- 设定Spring去哪些包中找Annotation -->
	<context:component-scan
		base-package="chen.action,chen.dao.impl,chen.service.impl,chen.strong">
		<context:include-filter type="annotation"
			expression="org.aspectj.lang.annotation.Aspect" /><!-- -->
	</context:component-scan>

	<!-- 启用Spring对@AspectJ的支持 proxy-target-class="true"这个强制使用CGLIB代理,主要是为action增强 -->
	<aop:aspectj-autoproxy proxy-target-class="true"/>


	<!-- 属性占位符配置器 (用于读取dbconn.properties文件) -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list><!-- classpath:不能掉 -->
				<value>classpath:dbconn.properties</value>
			</list>
		</property>
	</bean>


	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<!-- 指定连接数据库的驱动 -->
		<property name="driverClass" value="${jdbc.driverClassname}" />
		<!-- 指定连接数据库的URL -->
		<property name="jdbcUrl" value="${jdbc.uil}" />
		<!-- 指定连接数据库的用户名 -->
		<property name="user" value="${jdbc.username}" />
		<!-- 指定连接数据库的密码 -->
		<property name="password" value="${jdbc.password}" />


		<!-- 指定连接数据库连接池的最大连接数 -->
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}" />
		<!-- 指定连接数据库连接池的最小连接数 -->
		<property name="minPoolSize" value="${jdbc.minPoolSize}" />
		<!-- 指定连接数据库连接池的初始化连接数 -->
		<property name="initialPoolSize" value="${jdbc.initialPoolSize}" />
		<!-- 指定连接数据库连接池的连接的最大空闲时间 -->
		<property name="maxIdleTime" value="${jdbc.maxIdleTime}" />
	</bean>



	<!-- 创建sessionFactory工厂 -->
	<!-- 如果使用的是Annotation方式不能使用org.springframework.orm.hibernate3.LocalSessionFactoryBean， 
		而应该使用org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean -->
	<!-- 使用hibernate4没有提供专门的annotation.AnnotationSessionFactoryBean针对Annotation的类， 
		直接在LocalSessionFactoryBean中已经集成 -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mappingLocations">
			<list><!-- 使用list集合，按文件名搜索匹配的映射文件 -->
				<value>classpath*:/chen/**/*.hbm.xml</value>
			</list>
		</property>
		<!-- <property name="configLocation" value="classpath:hibernate.cfg.xml" />  -->
		<!-- 以下用来列出Hibernate映射文件 -->
		<!-- <property name="mappingResources"> <list> <value>chen/entity/User.hbm.xml</value> 
			<value>chen/entity/Board.hbm.xml</value> <value>chen/entity/Role.hbm.xml</value> 
			<value>chen/entity/Comment.hbm.xml</value> <value>chen/entity/Topic.hbm.xml</value> 
			<value>chen/entity/TopicState.hbm.xml</value> <value>chen/entity/Authority.hbm.xml</value> 
			</list> </property> -->
		<property name="hibernateProperties">
			<value>
				hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
				hibernate.show_sql=true
				hibernate.format_sql=true
				hibernate.hbm2ddl.auto=update
				hibernate.jdbc.fetch_size=100
				hibernate.jdbc.batch_size=20
				hibernate.current_session_context_class=org.springframework.orm.hibernate4.SpringSessionContext
				<!--如果有问题删除这个属性配置 上下文相关session -->
			</value>
		</property>
	</bean>


	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 配置声明式事务：方法一，在Service实现类或者public实现方法上使用注解@Transactional，则此类或方法就会启用事务机制 -->
	<!--<tx:annotation-driven transaction-manager="transactionManager" /> -->

	<!-- 第二个方法 -->
	<!-- 配置一个事务增强处理 -配置声明式事务：方法二，使用tx/aop命名空间的配置 事务管理器的名字(ID) -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 让所有方法都加入事物管理（效率低，实际使用中按需处理），为了提供效率，可以把一些查询之类的方法设置为只读事务 -->
			<!-- 方法名一定要匹配,否则不匹配的方法不会被加入事务中,导致 Could not obtain transaction-synchronized 
				Session for current thread -->
			<tx:method name="*get*" propagation="REQUIRED" read-only="true" />
			<tx:method name="*find*" propagation="REQUIRED" read-only="true" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="*" /><!-- 其他方法采用默认事务 -->
		</tx:attributes>
	</tx:advice>

	<!-- 配置AOP，Spring是通过AOP来进行事物管理的 -->
	<aop:config> <!--设置pointcut表示哪些方法要加入事物处理 -->
		<!--定义一个切入点 --><!-- 通过advisor将增强处理绑定到切入点上 -->
		<aop:pointcut id="allMethods" expression="execution(* chen.service.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="allMethods" />
	</aop:config>

	<!-- bean后处理器 仅仅为测试 
	<bean class="chen.util.MyBeanPostProcessor" />-->


</beans>

